import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
        classpath 'org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6'
        classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
    }
}


group "io.github.robertoschwald"
version project.file("../version.txt").text.trim()

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-plugin-publish"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:"org.asciidoctor.convert"

ext {
    grailsVersion = project.grailsVersion
    gradleWrapperVersion = project.gradleWrapperVersion
}

sourceCompatibility = targetCompatibility = 1.8

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web-plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.2"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-web-testing-support"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"

    provided "com.agileorbit:schwartz:1.0.1"
}

bootRepackage.enabled = false

// Needed for org.asciidoctor:asciidoctorj-epub3:1.5.0-alpha.6
// See https://github.com/asciidoctor/asciidoctorj/issues/415
asciidoctorj {
    version = '1.5.4'
}

static String buildDate() {
    def df = new SimpleDateFormat("yyyy-MM-dd")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

assets {
    packagePlugin = true
}

grailsPublish {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    githubSlug = 'robertoschwald/grails-schwartz-monitor'
    issueTrackerUrl = 'https://github.com/robertoschwald/grails-schwartz-monitor/issues'
    vcsUrl = 'https://github.com/robertoschwald/grails-schwartz-monitor/'
    websiteUrl = project.hasProperty('websiteUrl') ? project.websiteUrl : "http://grails.org/plugin/$project.name"
    license {
        name = project.hasProperty('license') ? [project.license] : ['Apache-2.0']
    }
    title = "Grails Schwartz Monitor"
    desc = "Monitor Quartz Jobs. Supports Grails-Schwartz and Grails-Quartz."
    developers = [robertoschwald:"Robert Oschwald"]
}

asciidoctor {
    separateOutputDirs = false
    sourceDir = file('src/docs')
    sources {
        include 'index.adoc'
    }
    outputDir new File(buildDir, 'docs')
    backends 'html5', 'pdf', 'epub3'
    attributes  copyright  : 'Apache License, Version 2.0',
      docinfo1             : 'true',
      doctype              : 'book',
      encoding             : 'utf-8',
      'front-cover-image'  : 'image:cover.png[Front Cover,800,600]',
      icons                : 'font',
      id                   : project.name + ':' + project.version,
      idprefix             : '',
      idseparator          : '-',
      lang                 : 'en',
      linkattrs            : true,
      numbered             : '',
      producer             : 'Asciidoctor',
      revnumber            : project.version,
      setanchors           : true,
      'source-highlighter'  : 'prettify',
      toc                  : 'left',
      toc2                 : '',
      toclevels            : '2'
}

task docs(dependsOn: 'asciidoctor') {
    doLast {
        File dir = new File(buildDir, 'docs')
        dir.mkdirs()

        ['pdf', 'epub'].each { String ext ->
            File f = new File(dir, 'index.' + ext)
            if (f.exists()) {
                f.renameTo new File(dir, project.name + '-' + project.version + '.' + ext)
            }
        }

        new File(buildDir, 'docs/ghpages.html') << file('src/docs/templates/index.tmpl').text.replaceAll("@VERSION@", project.version).replaceAll("@DOCDATE@", buildDate())

        copy {
            from 'src/docs'
            into new File(buildDir, 'docs').path
            include '**/*.png'
        }
    }
}






